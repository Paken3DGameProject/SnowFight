cmake_minimum_required(VERSION 2.8)
project(SnowFight CXX)
if(MSVC)
	set(CMAKE_CXX_FLAGS "/source-charset:utf-8")
	set(GLFW_GLEW_libraries_dirs C:/ CACHE STRING description)
	set(GLFW_GLEW_include_dirs C:/ CACHE STRING description)
	link_directories(${GLFW_GLEW_libraries_dirs})
	include_directories(${GLFW_GLEW_include_dirs})
else()
	Find_Package(PkgConfig REQUIRED)
	pkg_search_module(GLFW REQUIRED glfw3)
	Find_Package(GLEW REQUIRED)
	Find_Package(OpenGL REQUIRED)
endif()
add_library(Matrix SHARED Matrix.cpp)
add_library(Vector3 SHARED Vector3.cpp)
add_executable(Test main.cpp)

if(MSVC)
	target_link_libraries(Test opengl32)
	target_link_libraries(Test glew32d)
	target_link_libraries(Test glfw3)
	target_link_libraries(Matrix opengl32)
	target_link_libraries(Matrix glew32d)
	target_link_libraries(Matrix glfw3)
	target_link_libraries(Vector3 opengl32)
	target_link_libraries(Vector3 glew32d)
	target_link_libraries(Vector3 glfw3)

else()
	target_link_libraries(Test ${OPENGL_LIBRARY})
	target_link_libraries(Test ${GLEW_LIBRARIES})
	target_link_libraries(Test ${GLFW_LIBRARIES})
	target_link_libraries(Matrix ${OPENGL_LIBRARY})
	target_link_libraries(Matrix ${GLEW_LIBRARIES})
	target_link_libraries(Matrix ${GLFW_LIBRARIES})
	target_link_libraries(Vector3 ${OPENGL_LIBRARY})
	target_link_libraries(Vector3 ${GLEW_LIBRARIES})
	target_link_libraries(Vector3 ${GLFW_LIBRARIES})
endif()
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY obj)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY obj)
target_link_libraries(Test Matrix)
target_link_libraries(Test Vector3)
