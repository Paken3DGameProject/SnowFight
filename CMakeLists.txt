cmake_minimum_required(VERSION 3.10)
project(SnowFight CXX)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY obj)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY obj)
include_directories(include)
if(MSVC)
    string(REPLACE "/W3" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4 /EHsc")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
	set(GLFW_GLEW_libraries_dirs C:/ CACHE PATH description)
	set(GLFW_GLEW_include_dirs C:/ CACHE PATH description)
	link_directories(${GLFW_GLEW_libraries_dirs})
	include_directories(${GLFW_GLEW_include_dirs})
	add_definitions(-DGLEW_STATIC)
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -g3")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2")
	Find_Package(PkgConfig REQUIRED)
	pkg_search_module(GLFW REQUIRED glfw3)
	Find_Package(GLEW REQUIRED)
	Find_Package(OpenGL REQUIRED)
endif()

add_library(Object STATIC src/Object.cpp)
add_library(Window STATIC src/Window.cpp)
add_library(Matrix STATIC src/Matrix.cpp)
add_library(LoadShader STATIC src/LoadShader.cpp)
add_library(Vector STATIC src/Vector.cpp)
add_executable(SnowFight main.cpp)

if(MSVC)
	target_link_libraries(SnowFight opengl32)
	target_link_libraries(SnowFight libglew32d)
	target_link_libraries(SnowFight glfw3)
else()
	target_link_libraries(SnowFight ${OPENGL_LIBRARY})
	target_link_libraries(SnowFight ${GLEW_LIBRARIES})
	target_link_libraries(SnowFight ${GLFW_LIBRARIES})
endif()
target_link_libraries(SnowFight Object)
target_link_libraries(SnowFight Window)
target_link_libraries(SnowFight Matrix)
target_link_libraries(SnowFight LoadShader)
add_custom_target(CopyResources COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/resources ${CMAKE_CURRENT_BINARY_DIR}/resources)
add_dependencies(SnowFight CopyResources)